<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bohlender.pro</title>
    <link>https://bohlender.pro/blog/</link>
    <description>Thoughts on formal methods, computer science, art &amp; society</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Â© Dimitri Bohlender</copyright>
    <lastBuildDate>Wed, 21 Aug 2019 17:23:49 +0200</lastBuildDate>
    <atom:link href="https://bohlender.pro/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Turning Studio Headphones Into a Headset</title>
      <link>https://bohlender.pro/blog/turning-studio-headphones-into-a-headset/</link>
      <pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate>
      <dc:creator>Dimitri Bohlender</dc:creator>
      <category>Tinkering</category>
      <guid>https://bohlender.pro/blog/turning-studio-headphones-into-a-headset/</guid>
      <description>&lt;p&gt;In a recent virtual meeting a new colleague was surprised to see me using a &lt;a href=&#34;https://beyerdynamic.com/dt-770-pro.html&#34;&gt;Beyerdynamic DT 770 PRO&lt;/a&gt; &lt;em&gt;headset&lt;/em&gt; &amp;ndash; a product Beyerdynamic does not even list.
The DT 770 PRO are well-known studio &lt;em&gt;headphones&lt;/em&gt;, and so are all the other entries in Beyerdynamic&amp;rsquo;s &lt;q&gt;studio&lt;/q&gt; line.
Only their &lt;q&gt;gaming&lt;/q&gt; line of products features headsets.
So how could I possibly be using a device that does not seem to exist?&lt;/p&gt;
&lt;p&gt;The solution is unspectacular if one is aware of &amp;ldquo;detachable microphones&amp;rdquo;.
To turn a wired studio headphone into a headset all one needs to do is to make it possible to attach such a microphone.
This post illustrates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how replacing the integrated headphone cable by an &lt;a href=&#34;https://en.wikipedia.org/wiki/Phone_connector_(audio)&#34;&gt;audio jack&lt;/a&gt; achieves this,&lt;/li&gt;
&lt;li&gt;the concrete implementation using my DT 770 PRO as a test object.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Solving the &#34;Seven Segment Search&#34; Puzzle with Z3</title>
      <link>https://bohlender.pro/blog/aoc-seven-segment-search-with-z3/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      <dc:creator>Dimitri Bohlender</dc:creator>
      <category>SMT</category>
      <category>Puzzle</category>
      <category>Advent of Code</category>
      <guid>https://bohlender.pro/blog/aoc-seven-segment-search-with-z3/</guid>
      <description>&lt;p&gt;This week I stumbled upon &lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/rbwnh5/2021_day_8_can_it_be_solved_as_a_constraint/&#34;&gt;someone wondering&lt;/a&gt; whether the &lt;strong&gt;second part&lt;/strong&gt; of the recent &lt;a href=&#34;https://adventofcode.com/2021/day/8&#34;&gt;Advent of Code puzzle &amp;ldquo;Seven Segment Search&amp;rdquo;&lt;/a&gt; can be expressed as a constraint satisfaction problem.
As attested by the replies: yes, it can.
However, I think the question deserves a more extensive discussion than just a few comments in a thread.
This post tries to provide a more instructive answer and raise awareness for the tradeoffs or solver misuses some solutions put up with.&lt;/p&gt;
&lt;p&gt;I assume that the reader is familiar with mathematical notation and&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;just struggles to express the posed problem in a formal, declarative way, &lt;em&gt;or&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;is interested in seeing how the &lt;a href=&#34;https://en.wikipedia.org/wiki/Satisfiability_modulo_theories&#34;&gt;SMT&lt;/a&gt; solver &lt;a href=&#34;https://github.com/Z3Prover/z3/&#34;&gt;Z3&lt;/a&gt; can be used to express and solve the problem in several logics.
It takes only few steps to get from a quantifier-laden high-level formulation to what is effectively &lt;a href=&#34;https://en.wikipedia.org/wiki/Propositional_logic&#34;&gt;propositional logic&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Generating Crosswords via SAT/SMT</title>
      <link>https://bohlender.pro/blog/generating-crosswords-with-sat-smt/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      <dc:creator>Dimitri Bohlender</dc:creator>
      <category>SAT</category>
      <category>Puzzle</category>
      <guid>https://bohlender.pro/blog/generating-crosswords-with-sat-smt/</guid>
      <description>&lt;p&gt;Recently I got interested in designing personalised crosswords as a way to spice up photo book presents.
This made me realise how hard generating &lt;q&gt;high-quality&lt;/q&gt; crosswords actually is.
Trying to create a crossword from a set of words &amp;ndash; or a subset thereof &amp;ndash; I checked out several tools but found all of them to be based on heuristics and yield rather sparse crosswords.&lt;/p&gt;
&lt;p&gt;In line with the general theme of my previous posts, this one illustrates how we can leverage &lt;a href=&#34;https://en.wikipedia.org/wiki/Boolean_satisfiability_problem&#34;&gt;SAT solving&lt;/a&gt; to solve this problem.
In contrast to related approaches, which assume a fixed grid structure and search for fitting words, we consider word placement as part of the problem and eventually end up with an integrated solution to generating crosswords of adjustable quality.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Playing Hard Mastermind Games with a SAT-based AI</title>
      <link>https://bohlender.pro/blog/playing-hard-mastermind-games-with-a-sat-based-ai/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
      <dc:creator>Dimitri Bohlender</dc:creator>
      <category>SAT</category>
      <category>AI</category>
      <category>Puzzle</category>
      <guid>https://bohlender.pro/blog/playing-hard-mastermind-games-with-a-sat-based-ai/</guid>
      <description>&lt;p&gt;Back in the day, &lt;a href=&#34;https://en.wikipedia.org/wiki/Mastermind_(board_game)&#34;&gt;Mastermind&lt;/a&gt; was a popular two player code-breaking game, and many &lt;a href=&#34;https://en.wikipedia.org/wiki/Mastermind_(board_game)#Variations&#34;&gt;variations thereof&lt;/a&gt; still exist as both standalone games and puzzles within other games.
Although it is difficult for a human player to make &lt;em&gt;optimal guesses&lt;/em&gt; of the secret code, or at least guesses that do not conflict with the provided clues, the setting is usually simple enough for an AI to find such candidates via explicit exploration of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Game_tree&#34;&gt;game tree&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, such approaches become unfeasible when the number of possibilities for secret codes grows into the millions.
This post illustrates the problem with standard approaches, and how finding consistent candidates can be approached with &lt;a href=&#34;https://en.wikipedia.org/wiki/Boolean_satisfiability_problem&#34;&gt;SAT&lt;/a&gt; solving &amp;ndash; yielding an AI that can handle orders-of-magnitude harder Mastermind instances.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving a Logic Synthesis Puzzle via SAT/SMT</title>
      <link>https://bohlender.pro/blog/solving-a-logic-synthesis-puzzle-via-sat-smt/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      <dc:creator>Dimitri Bohlender</dc:creator>
      <category>SAT</category>
      <category>SMT</category>
      <category>Logic Synthesis</category>
      <category>Puzzle</category>
      <guid>https://bohlender.pro/blog/solving-a-logic-synthesis-puzzle-via-sat-smt/</guid>
      <description>&lt;p&gt;A few weeks ago, I was asked the following riddle:
&lt;q&gt;Design a &lt;a href=&#34;https://en.wikipedia.org/wiki/Logic_gate&#34;&gt;logic circuit&lt;/a&gt; with three inputs and three outputs, such that the outputs are the inverted inputs. You may use arbitrary many AND and OR gates, but at most two NOT gates&lt;/q&gt;.
Although the characterisation of this problem as an &lt;a href=&#34;https://en.wikipedia.org/wiki/Satisfiability_modulo_theories&#34;&gt;SMT&lt;/a&gt; instance is straightforward, I found it necessary to reduce it to &lt;a href=&#34;https://en.wikipedia.org/wiki/Boolean_satisfiability_problem&#34;&gt;SAT&lt;/a&gt; and incorporate further assumptions to achieve reasonable performance.&lt;/p&gt;
&lt;p&gt;This post illustrates said process, ranging from the original idea to a standard formulation of SAT-based logic synthesis to a problem-specific and more constrained instance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SMT-based Reasoning About the Fast Inverse Square Root</title>
      <link>https://bohlender.pro/blog/smt-based-optimisation-of-fast-inverse-square-root/</link>
      <pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate>
      <dc:creator>Dimitri Bohlender</dc:creator>
      <category>SMT</category>
      <category>SMT-LIB</category>
      <category>Software Verification</category>
      <guid>https://bohlender.pro/blog/smt-based-optimisation-of-fast-inverse-square-root/</guid>
      <description>&lt;p&gt;While there is a &lt;a href=&#34;https://web.archive.org/web/20160308091758/http://www.daxia.com/bibis/upload/406Fast_Inverse_Square_Root.pdf&#34;&gt;mathematical explanation&lt;/a&gt; for the choice of &lt;code&gt;0x5F3759DF&lt;/code&gt; in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fast_inverse_square_root&#34;&gt;famous bit-level hack&lt;/a&gt; for approximating the multiplicative inverse of the square root of a 32-bit floating-point number, it is not immediately clear to what extent the reasoning is really applicable in the context of machine data types and their peculiarities.
This post illustrates how this, and related aspects, can be investigated with &lt;a href=&#34;https://en.wikipedia.org/wiki/Satisfiability_modulo_theories&#34;&gt;SMT&lt;/a&gt;-based reasoning about the actual implementation.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>